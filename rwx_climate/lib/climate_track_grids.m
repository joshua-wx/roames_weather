function track_grids = climate_track_grids(track_grids,track_ind,storm_date_list,storm_latloncent_list,...
    storm_subset_list,storm_ijbox_list,db_root,radar_id,r_scale,stormh5_varname,data_min,radar_step)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Joshua Soderholm, Fugro ROAMES, 2017
%
% WHAT: For a list of database index values that form a track, generate a
% density and motion field for that track and add these to the track_grids
% struct.
% This process requires extraction of data from the storm.h5 files.
%
% INPUTS
% track_grids:          struct continaing accumulated density and motion
%                       fields (density_grid: track counts, u_grid: u
%                       motion field, v_grid: v motion field, max_grid
%                       n_grid: total overlap count for motion normalisation)
% track_ind:            index of track entires from database (mx1)
% storm_date_list:      date list (nx1)
% storm_latloncent_list:lat,lon centroid list (nx2)
% storm_subset_list:    subset id list (nx1) only unique for each scan
% storm_ijbox_list:     ij coord list (nx4) for storm.h5 fields, in [max i,
%                       min i, max j, min j]
% db_root:              root for archive path (string)
% radar_id:             radar id (double)
% r_scale:              storm h5 data scaling (double)
% stormh5_varname:      target variable name in storm h5 (string)
% data_min:             min value for storm h5 data filtering (double)
% radar_step:           radar step for current date (double)
%
% RETURNS track_grids: see above
%
% NOTES: swath polygons are generated by performing the convex hull around
% pairs of cells in a track and applying the union to these processed
% pairs. Pairs are composed of inital and final cells.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%preallocate cell array to store extracted storm.h5 fields
storm_data = cell(length(track_ind),1);

%correct data_min if nan
if strcmp(data_min,'nan')
    data_min = 0;
end

%load storm h5 datafield from file for each track index
for i = 1:length(track_ind)
    %build paths to h5 from date and radar_id
    target_date    = storm_date_list(track_ind(i));
    target_subset  = storm_subset_list(track_ind(i));
    target_datevec = datevec(target_date);
    target_fn      = [num2str(radar_id,'%02.0f'),'_',datestr(target_date,'yyyymmdd_HHMMSS'),'.storm.h5'];
    target_ffn     = [db_root,num2str(radar_id,'%02.0f'),'/',num2str(target_datevec(1)),'/',...
        num2str(target_datevec(2),'%02.0f'),'/',num2str(target_datevec(3),'%02.0f'),'/',target_fn];
    %read required h5 field
    h5data         = h5read(target_ffn,['/',num2str(target_subset),'/',stormh5_varname]);
    %rescale data
    h5data         = double(h5data)./r_scale;
    %store in cell array
    storm_data{i}  = h5data;
end

%generate swath
out_struct = process_swath(storm_latloncent_list(track_ind,:),storm_ijbox_list(track_ind,:),storm_date_list(track_ind),storm_data,data_min,radar_step,track_grids.grid_size);

%accumulate
normalised_density_grid  = out_struct.density_grid > 0;
track_grids.density_grid = track_grids.density_grid + normalised_density_grid;
track_grids.u_grid       = track_grids.u_grid       + out_struct.u_grid;
track_grids.v_grid       = track_grids.v_grid       + out_struct.v_grid;
track_grids.n_grid       = track_grids.n_grid       + out_struct.density_grid;
%append
track_grids.max_grid     = max(cat(3,track_grids.max_grid,out_struct.max_grid),[],3);
